// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  portfolio   Portfolio[]
  apiKeys     ApiKey[]
  accounts    Account[]
  chatSessions ChatSession[]
  
  @@map("users")
}

model Portfolio {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  assets      Asset[]
  
  @@map("portfolios")
}

model Asset {
  id          String   @id @default(cuid())
  portfolioId String
  symbol      String
  name        String
  quantity    Float
  avgPrice    Float
  assetType   String   // stock, bond, crypto, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  
  @@map("assets")
}

model ApiKey {
  id          String   @id @default(cuid())
  userId      String
  provider    String   // bank name or financial service
  keyName     String
  encryptedKey String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("api_keys")
}

model Account {
  id          String   @id @default(cuid())
  userId      String
  provider    String
  accountId   String
  accountName String
  accountType String   // checking, savings, investment, etc.
  balance     Float?
  currency    String   @default("USD")
  isActive    Boolean  @default(true)
  lastSync    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("accounts")
}

model ChatSession {
  id          String   @id @default(cuid())
  userId      String
  title       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    Message[]
  
  @@map("chat_sessions")
}

model Message {
  id          String   @id @default(cuid())
  sessionId   String
  role        String   // user, assistant
  content     String
  metadata    Json?    // for storing chart data, etc.
  createdAt   DateTime @default(now())
  
  // Relations
  session     ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}

