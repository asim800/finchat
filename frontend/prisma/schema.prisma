// ============================================================================
// PRISMA SCHEMA - MyStocks.ai Finance Application
// ============================================================================
// This schema contains all models organized by domain:
// - Shared/Market Data: Models used by multiple services (frontend, FastAPI)
// - Frontend/User Data: Models specific to the web application
// ============================================================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// SHARED/MARKET DATA MODELS
// ============================================================================
// These models contain market data and are shared across services
// (frontend, FastAPI, etc.)

model HistoricalPrice {
  id        String   @id @default(cuid())
  symbol    String
  price     Float
  date      DateTime
  source    String?
  assetType String?
  createdAt DateTime @default(now())

  @@unique([symbol, date])
  @@index([symbol, date(sort: Desc)])
  @@index([date])
  @@map("historical_prices")
}

// ============================================================================
// FRONTEND/USER DATA MODELS
// ============================================================================
// These models are specific to the web application frontend

// User Management Models
model User {
  id                          String        @id @default(cuid())
  email                       String        @unique
  password                    String
  firstName                   String
  lastName                    String
  createdAt                   DateTime      @default(now())
  updatedAt                   DateTime      @updatedAt
  address                     String?
  birthDate                   DateTime?
  city                        String?
  dependents                  Int?
  emergencyFund               Float?
  employmentStatus            String?
  estimatedSocialSecurityAt65 Float?
  homeValue                   Float?
  housingType                 String?
  investmentExperience        String?
  investmentGoals             String?
  monthlyAlimony              Float?
  monthlyFixedExpenses        Float?
  monthlyIncome               Float?
  monthlyMortgage             Float?
  monthlyRent                 Float?
  phone                       String?
  riskTolerance               String?
  state                       String?
  totalDebt                   Float?
  zipCode                     String?
  role                        String        @default("user")
  chatHistoryLimit            Int           @default(5)
  accounts                    Account[]
  apiKeys                     ApiKey[]
  chatSessions                ChatSession[]
  portfolio                   Portfolio[]

  @@map("users")
}

// Portfolio Management Models
model Portfolio {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  assets      Asset[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("portfolios")
}

model Asset {
  id          String    @id @default(cuid())
  portfolioId String
  symbol      String
  quantity    Float
  avgCost     Float?
  assetType   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  price       Float?
  purchaseDate DateTime? // Optional purchase date for tax calculations
  
  // Options-specific fields (only used when assetType = "options")
  optionType      String?   // "call" or "put"
  expirationDate  DateTime? // Options expiration date
  strikePrice     Float?    // Strike price for options
  
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@map("assets")
}

// API Integration Models
model ApiKey {
  id           String   @id @default(cuid())
  userId       String
  provider     String
  keyName      String
  encryptedKey String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model Account {
  id          String    @id @default(cuid())
  userId      String
  provider    String
  accountId   String
  accountName String
  accountType String
  balance     Float?
  currency    String    @default("USD")
  isActive    Boolean   @default(true)
  lastSync    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

// Chat System Models
model ChatSession {
  id             String    @id @default(cuid())
  userId         String?
  title          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  expiresAt      DateTime?
  guestSessionId String?
  isGuestSession Boolean   @default(false)
  user           User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages       Message[]

  @@map("chat_sessions")
}

model Message {
  id        String      @id @default(cuid())
  sessionId String
  role      String
  content   String
  metadata  Json?
  createdAt DateTime    @default(now())
  provider  String?
  session   ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// Learning/Content Management Models
model FinancialTerm {
  id          String   @id @default(cuid())
  term        String   @unique
  definition  String
  category    String?  // broad category like "Investment Basics", "Risk Management"
  keywords    String[] // searchable tags like ["portfolio", "diversification", "beginner"]
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("financial_terms")
}
